function prob = event_slide(prob,data,ev_ind,boundary)
%EVENT_SLIDE Add monitor function and detection of sliding events in the 
% COCO compatible problem
% Input:
%   prob: COCO compatible problem structure generated by pwsdde_coco_prob.m
%   data: collocation data structure
%   ev_ind: indicies of events to check for sliding (default all)
%   boundary: if true stop the continuation run when a sliding event is
%       detected (default true)
% Output:
%   prob: COCO compatible continuation problem structure with vanishing
%       segment detection function

if nargin<3 || isempty(ev_ind)
    ev_ind = 1:length(data.seg);   % check all events by default
end
if nargin<4
    boundary = true; % boundary event by default
end

% add an event and monitor function for each listed in ev_ind
uidx = prob.efunc.x_idx;
for i = ev_ind
    m_in = feval(data.sys.e,[],[],[],data.sig(i),7,1);
    m_out = feval(data.sys.e,[],[],[],data.sig(i),7,2);
    if m_in ~= m_out
        % Only add sliding monitor functions where a mode change is induced
        fid = sprintf('slide%i',i);
        pid = sprintf('sl.bd(%i)',i);
        prob = coco_add_func(prob, fid, @(p,d,u) pwsdde_slide(p,d,u,i),...
            data,'regular',pid,'uidx',uidx,'F+DF');
        % add event corresponding to reaching the sliding boundary
        if boundary
            prob = coco_add_event(prob,'SL','boundary', pid,'<',0);
        else
            prob = coco_add_event(prob,'SL','special point', pid,'=',0);
        end
    end
end

end

