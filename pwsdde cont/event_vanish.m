function prob = event_vanish(prob,data,T_lim,rel,boundary)
%EVENT_VANISH Add monitor function and detection of vanishing
%segments in the COCO compatible problem
% Input:
%   prob: COCO compatible problem structure generated by pwsdde_coco_prob.m
%   data: collocation data structure
%   T_lim: minimum allowed segment length
%   rel: if true, the vanishing segment event is defined relative to
%       the period length (default false)
%   boundary: if true stop the continuation run when one of the smooth
%       segments is about to disappear (default true)
% Output:
%   prob: COCO compatible continuation problem structure with vanishing
%       segment detection function

if nargin<4 || isempty(rel)
    rel = false; % absolute segment length limit by default
end
if nargin<5
    boundary = true; % boundary event by default
end

% neccessary indicies
N = length(data.seg);   % number of smooth segments
T_idx = zeros(1,N);     % indices of segment lengths
for i=1:N
    T_idx(i) = data.seg{i}.uidx(data.seg{i}.coll_seg.maps.T_idx);
end

% add continuation variable corresponding to min(T)
fcn = @(f) @(prob,data,u) deal(data, f(u)); 
if rel
    f_min = @(T) min(T)/sum(T);
else
    f_min = @(T) min(T);
end
prob = coco_add_func(prob,'vanish',fcn(f_min),[],'regular',...
    'T_min','uidx',T_idx);

% add event corresponding to vanishing segments
if boundary
    prob = coco_add_event(prob,'VA','boundary', 'T_min','<',T_lim);
else
    prob = coco_add_event(prob,'VA','special point', 'T_min','=',T_lim);
end

end

