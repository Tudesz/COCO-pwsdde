function prob = event_graze_int(prob,data,ev_types,boundary)
%EVENT_GRAZE_BD Add monitor function and detection of interior grazing 
%events in the COCO compatible problem
% Input:
%   prob: COCO compatible problem structure generated by pwsdde_coco_prob.m
%   data: collocation data structure
%   ev_types: event types to check for grazing (default all)
%   boundary: if true stop the continuation run when a grazing event is
%       detected (default true)
% Output:
%   prob: COCO compatible continuation problem structure with interior
%       grazing detection function

if nargin<3 || isempty(ev_types)
    ev_types = 1:data.sys.event_no;   % check all events by default
end
if nargin<4
    boundary = true; % boundary event by default
end

% add an event and monitor function for each listed in ev_types
uidx = prob.efunc.x_idx;
for i = ev_types
    fid = sprintf('graze_int%i',i);
    pid = sprintf('gr.int(%i)',i);
    prob = coco_add_func(prob, fid, @(p,d,u) pwsdde_int_graze(p,d,u,i),...
        data,'regular',pid,'uidx',uidx,'F+DF');
    % add event corresponding to reaching the grazing boundary
    if boundary
        prob = coco_add_event(prob,'IGR','boundary', pid,'=',0);
    else
        prob = coco_add_event(prob,'IGR','special point', pid,'=',0);
    end
end

end


